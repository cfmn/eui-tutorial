<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Layouts - Ebiten UI</title>
    <link>http://localhost:1313/eui/layouts/index.html</link>
    <description>The library allows you to compose containers in many different ways, and this chapter will tell you about each of them.&#xA;Content Anchor layout Row layout Grid layout</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 04 Oct 2024 19:45:29 +0300</lastBuildDate>
    <atom:link href="http://localhost:1313/eui/layouts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Anchor layout</title>
      <link>http://localhost:1313/eui/layouts/anchor/index.html</link>
      <pubDate>Fri, 04 Oct 2024 19:45:29 +0300</pubDate>
      <guid>http://localhost:1313/eui/layouts/anchor/index.html</guid>
      <description>Anchor layout allows the child containers to be anchored to a specific constraint.&#xA;Full example No snippet found for id &#34;full&#34;&#xA;Layout options Padding Layout allows you to specify padding for all child elements but not the itself.&#xA;Padding: Left Right Top Bottom 1root := widget.NewContainer( 2&#x9;widget.ContainerOpts.BackgroundImage( 3&#x9;image.NewNineSliceColor(colornames.Gainsboro), 4&#x9;), 5&#x9;widget.ContainerOpts.Layout(widget.NewAnchorLayout( 6&#x9;widget.AnchorLayoutOpts.Padding(widget.Insets{ 7&#x9;Left: 50, 8&#x9;}), 9&#x9;)), 10)</description>
    </item>
    <item>
      <title>Row layout</title>
      <link>http://localhost:1313/eui/layouts/row/index.html</link>
      <pubDate>Fri, 04 Oct 2024 19:45:29 +0300</pubDate>
      <guid>http://localhost:1313/eui/layouts/row/index.html</guid>
      <description>Row layout places all child containers in one row or column. It can be useful for creating lists of widgets.&#xA;Full example 1package main 2 3import ( 4&#x9;&#34;github.com/ebitenui/ebitenui&#34; 5&#x9;&#34;github.com/ebitenui/ebitenui/image&#34; 6&#x9;&#34;github.com/ebitenui/ebitenui/widget&#34; 7&#x9;&#34;github.com/hajimehoshi/ebiten/v2&#34; 8&#x9;&#34;golang.org/x/image/colornames&#34; 9) 10 11type Game struct { 12&#x9;ui *ebitenui.UI 13} 14 15func NewGame() *Game { 16&#x9;a := widget.NewContainer( 17&#x9;widget.ContainerOpts.BackgroundImage( 18&#x9;image.NewNineSliceColor(colornames.Indianred), 19&#x9;), 20&#x9;widget.ContainerOpts.WidgetOpts( 21&#x9;widget.WidgetOpts.LayoutData(widget.RowLayoutData{ 22&#x9;Stretch: true, 23&#x9;}), 24&#x9;widget.WidgetOpts.MinSize(96, 50), 25&#x9;), 26&#x9;) 27&#x9;b := widget.NewContainer( 28&#x9;widget.ContainerOpts.BackgroundImage( 29&#x9;image.NewNineSliceColor(colornames.Goldenrod), 30&#x9;), 31&#x9;widget.ContainerOpts.WidgetOpts( 32&#x9;widget.WidgetOpts.LayoutData(widget.RowLayoutData{ 33&#x9;Stretch: true, 34&#x9;}), 35&#x9;widget.WidgetOpts.MinSize(96, 50), 36&#x9;), 37&#x9;) 38&#x9;c := widget.NewContainer( 39&#x9;widget.ContainerOpts.BackgroundImage( 40&#x9;image.NewNineSliceColor(colornames.Steelblue), 41&#x9;), 42&#x9;widget.ContainerOpts.WidgetOpts( 43&#x9;widget.WidgetOpts.LayoutData(widget.RowLayoutData{ 44&#x9;Stretch: true, 45&#x9;}), 46&#x9;widget.WidgetOpts.MinSize(96, 50), 47&#x9;), 48&#x9;) 49&#x9;d := widget.NewContainer( 50&#x9;widget.ContainerOpts.BackgroundImage( 51&#x9;image.NewNineSliceColor(colornames.Mediumseagreen), 52&#x9;), 53&#x9;widget.ContainerOpts.WidgetOpts( 54&#x9;widget.WidgetOpts.LayoutData(widget.RowLayoutData{ 55&#x9;Stretch: true, 56&#x9;}), 57&#x9;widget.WidgetOpts.MinSize(96, 50), 58&#x9;), 59&#x9;) 60&#x9;e := widget.NewContainer( 61&#x9;widget.ContainerOpts.BackgroundImage( 62&#x9;image.NewNineSliceColor(colornames.Darkslategray), 63&#x9;), 64&#x9;widget.ContainerOpts.WidgetOpts( 65&#x9;widget.WidgetOpts.LayoutData(widget.RowLayoutData{ 66&#x9;Stretch: true, 67&#x9;}), 68&#x9;widget.WidgetOpts.MinSize(96, 50), 69&#x9;), 70&#x9;) 71&#x9;root := widget.NewContainer( 72&#x9;widget.ContainerOpts.BackgroundImage( 73&#x9;image.NewNineSliceColor(colornames.Gainsboro), 74&#x9;), 75&#x9;widget.ContainerOpts.Layout(widget.NewRowLayout( 76&#x9;widget.RowLayoutOpts.Direction( 77&#x9;widget.DirectionVertical, 78&#x9;), 79&#x9;widget.RowLayoutOpts.Spacing(5), 80&#x9;widget.RowLayoutOpts.Padding(widget.NewInsetsSimple(25)), 81&#x9;)), 82&#x9;) 83&#x9;root.AddChild(a) 84&#x9;root.AddChild(b) 85&#x9;root.AddChild(c) 86&#x9;root.AddChild(d) 87&#x9;root.AddChild(e) 88 89&#x9;return &amp;Game{ 90&#x9;ui: &amp;ebitenui.UI{Container: root}, 91&#x9;} 92} 93 94func (g *Game) Update() error { 95&#x9;g.ui.Update() 96&#x9;return nil 97} 98 99func (g *Game) Draw(screen *ebiten.Image) { 100&#x9;g.ui.Draw(screen) 101} 102 103func (g *Game) Layout(w, h int) (int, int) { 104&#x9;return w, h 105} Layout options Direction Responsible for whether child containers will follow each other in rows or columns.</description>
    </item>
    <item>
      <title>Grid layout</title>
      <link>http://localhost:1313/eui/layouts/grid/index.html</link>
      <pubDate>Fri, 04 Oct 2024 19:45:29 +0300</pubDate>
      <guid>http://localhost:1313/eui/layouts/grid/index.html</guid>
      <description>The grid layout puts all child containers in an even grid, wrapping each row based on the number of columns.&#xA;Full example 1package main 2 3import ( 4&#x9;&#34;image/color&#34; 5&#x9;&#34;github.com/ebitenui/ebitenui&#34; 6&#x9;&#34;github.com/ebitenui/ebitenui/image&#34; 7&#x9;&#34;github.com/ebitenui/ebitenui/widget&#34; 8&#x9;&#34;github.com/hajimehoshi/ebiten/v2&#34; 9&#x9;&#34;golang.org/x/image/colornames&#34; 10&#x9;&#34;golang.org/x/image/colornames&#34; 11) 12 13type Game struct { 14&#x9;ui *ebitenui.UI 15} 16 17func NewGame() *Game { 18&#x9;root := widget.NewContainer( 19&#x9;widget.ContainerOpts.BackgroundImage( 20&#x9;image.NewNineSliceColor(colornames.Gainsboro), 21&#x9;), 22&#x9;widget.ContainerOpts.Layout(widget.NewGridLayout( 23&#x9;widget.GridLayoutOpts.Columns(5), 24&#x9;widget.GridLayoutOpts.DefaultStretch(true, true), 25&#x9;widget.GridLayoutOpts.Padding(widget.NewInsetsSimple(25)), 26&#x9;widget.GridLayoutOpts.Spacing(5, 5), 27&#x9;)), 28&#x9;) 29&#x9;colors := []color.Color{ 30&#x9;colornames.Indianred, 31&#x9;colornames.Goldenrod, 32&#x9;colornames.Steelblue, 33&#x9;colornames.Mediumseagreen, 34&#x9;colornames.Darkslategray, 35&#x9;} 36&#x9;for y := 0; y &lt; 5; y++ { 37&#x9;for x := 0; x &lt; 5; x++ { 38&#x9;child := widget.NewContainer( 39&#x9;widget.ContainerOpts.BackgroundImage( 40&#x9;image.NewNineSliceColor(colors[(x+y)%len(colors)]), 41&#x9;), 42&#x9;widget.ContainerOpts.WidgetOpts( 43&#x9;widget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 44&#x9;widget.WidgetOpts.MinSize(16, 16), 45&#x9;), 46&#x9;widget.ContainerOpts.Layout(widget.NewAnchorLayout()), 47&#x9;) 48&#x9;root.AddChild(child) 49&#x9;} 50&#x9;} 51 52&#x9;return &amp;Game{ 53&#x9;ui: &amp;ebitenui.UI{Container: root}, 54&#x9;} 55} 56 57func (g *Game) Update() error { 58&#x9;g.ui.Update() 59&#x9;return nil 60} 61 62func (g *Game) Draw(screen *ebiten.Image) { 63&#x9;g.ui.Draw(screen) 64} 65 66func (g *Game) Layout(w, h int) (int, int) { 67&#x9;return w, h 68} Layout options Columns Responsible for wrapping cells beyond a given number.</description>
    </item>
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Layouts - Ebiten UI</title>
    <link>http://localhost:1313/eui/layouts/index.html</link>
    <description>The library allows you to compose containers in many different ways, and this chapter will tell you about each of them.&#xA;Content Anchor layout Row layout</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 04 Oct 2024 19:45:29 +0300</lastBuildDate>
    <atom:link href="http://localhost:1313/eui/layouts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Anchor layout</title>
      <link>http://localhost:1313/eui/layouts/anchor/index.html</link>
      <pubDate>Fri, 04 Oct 2024 19:45:29 +0300</pubDate>
      <guid>http://localhost:1313/eui/layouts/anchor/index.html</guid>
      <description>Anchor layout allows the child containers to be anchored to a specific constraint.&#xA;Full example 1package main 2 3import ( 4&#x9;&#34;github.com/ebitenui/ebitenui&#34; 5&#x9;&#34;github.com/ebitenui/ebitenui/image&#34; 6&#x9;&#34;github.com/ebitenui/ebitenui/widget&#34; 7&#x9;&#34;github.com/hajimehoshi/ebiten/v2&#34; 8&#x9;&#34;golang.org/x/image/colornames&#34; 9) 10 11func main() { 12&#x9;ebiten.SetWindowSize(480, 320) 13&#x9;ebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 14&#x9;if err := ebiten.RunGame(NewGame()); err != nil { 15&#x9;panic(err) 16&#x9;} 17} 18 19type Game struct { 20&#x9;ui *ebitenui.UI 21} 22 23func NewGame() *Game { 24&#x9;left := widget.NewContainer( 25&#x9;widget.ContainerOpts.BackgroundImage( 26&#x9;image.NewNineSliceColor(colornames.Lightskyblue), 27&#x9;), 28&#x9;widget.ContainerOpts.WidgetOpts( 29&#x9;widget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 30&#x9;HorizontalPosition: widget.AnchorLayoutPositionStart, 31&#x9;StretchVertical: true, 32&#x9;}), 33&#x9;widget.WidgetOpts.MinSize(50, 50), 34&#x9;), 35&#x9;) 36&#x9;right := widget.NewContainer( 37&#x9;widget.ContainerOpts.BackgroundImage( 38&#x9;image.NewNineSliceColor(colornames.Lightblue), 39&#x9;), 40&#x9;widget.ContainerOpts.WidgetOpts( 41&#x9;widget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 42&#x9;HorizontalPosition: widget.AnchorLayoutPositionEnd, 43&#x9;StretchVertical: true, 44&#x9;}), 45&#x9;widget.WidgetOpts.MinSize(50, 50), 46&#x9;), 47&#x9;) 48&#x9;up := widget.NewContainer( 49&#x9;widget.ContainerOpts.BackgroundImage( 50&#x9;image.NewNineSliceColor(colornames.Lightcyan), 51&#x9;), 52&#x9;widget.ContainerOpts.WidgetOpts( 53&#x9;widget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 54&#x9;VerticalPosition: widget.AnchorLayoutPositionStart, 55&#x9;StretchHorizontal: true, 56&#x9;}), 57&#x9;widget.WidgetOpts.MinSize(50, 50), 58&#x9;), 59&#x9;) 60&#x9;down := widget.NewContainer( 61&#x9;widget.ContainerOpts.BackgroundImage( 62&#x9;image.NewNineSliceColor(colornames.Lightslategrey), 63&#x9;), 64&#x9;widget.ContainerOpts.WidgetOpts( 65&#x9;widget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 66&#x9;VerticalPosition: widget.AnchorLayoutPositionEnd, 67&#x9;StretchHorizontal: true, 68&#x9;}), 69&#x9;widget.WidgetOpts.MinSize(50, 50), 70&#x9;), 71&#x9;) 72&#x9;root := widget.NewContainer( 73&#x9;widget.ContainerOpts.BackgroundImage( 74&#x9;image.NewNineSliceColor(colornames.Lightsteelblue), 75&#x9;), 76&#x9;widget.ContainerOpts.Layout(widget.NewAnchorLayout()), 77&#x9;) 78&#x9;root.AddChild(left) 79&#x9;root.AddChild(right) 80&#x9;root.AddChild(up) 81&#x9;root.AddChild(down) 82 83&#x9;return &amp;Game{ 84&#x9;ui: &amp;ebitenui.UI{Container: root}, 85&#x9;} 86} 87 88func (g *Game) Update() error { 89&#x9;g.ui.Update() 90&#x9;return nil 91} 92 93func (g *Game) Draw(screen *ebiten.Image) { 94&#x9;g.ui.Draw(screen) 95} 96 97func (g *Game) Layout(w, h int) (int, int) { 98&#x9;return w, h 99} Layout options Padding Layout allows you to specify padding for all child elements but not the itself.</description>
    </item>
    <item>
      <title>Row layout</title>
      <link>http://localhost:1313/eui/layouts/row/index.html</link>
      <pubDate>Fri, 04 Oct 2024 19:45:29 +0300</pubDate>
      <guid>http://localhost:1313/eui/layouts/row/index.html</guid>
      <description>Row layout places all child containers in one row or column. It can be useful for creating lists of widgets.&#xA;Full example 1package main 2 3import ( 4&#x9;&#34;github.com/ebitenui/ebitenui&#34; 5&#x9;&#34;github.com/ebitenui/ebitenui/image&#34; 6&#x9;&#34;github.com/ebitenui/ebitenui/widget&#34; 7&#x9;&#34;github.com/hajimehoshi/ebiten/v2&#34; 8&#x9;&#34;golang.org/x/image/colornames&#34; 9) 10 11func main() { 12&#x9;ebiten.SetWindowSize(480, 320) 13&#x9;ebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 14&#x9;if err := ebiten.RunGame(NewGame()); err != nil { 15&#x9;panic(err) 16&#x9;} 17} 18 19type Game struct { 20&#x9;ui *ebitenui.UI 21} 22 23func NewGame() *Game { 24&#x9;a := widget.NewContainer( 25&#x9;widget.ContainerOpts.BackgroundImage( 26&#x9;image.NewNineSliceColor(colornames.Lightskyblue), 27&#x9;), 28&#x9;widget.ContainerOpts.WidgetOpts( 29&#x9;widget.WidgetOpts.LayoutData(widget.RowLayoutData{ 30&#x9;Stretch: true, 31&#x9;}), 32&#x9;widget.WidgetOpts.MinSize(50, 80), 33&#x9;), 34&#x9;) 35&#x9;b := widget.NewContainer( 36&#x9;widget.ContainerOpts.BackgroundImage( 37&#x9;image.NewNineSliceColor(colornames.Lightblue), 38&#x9;), 39&#x9;widget.ContainerOpts.WidgetOpts( 40&#x9;widget.WidgetOpts.LayoutData(widget.RowLayoutData{ 41&#x9;Stretch: true, 42&#x9;}), 43&#x9;widget.WidgetOpts.MinSize(50, 80), 44&#x9;), 45&#x9;) 46&#x9;c := widget.NewContainer( 47&#x9;widget.ContainerOpts.BackgroundImage( 48&#x9;image.NewNineSliceColor(colornames.Lightcyan), 49&#x9;), 50&#x9;widget.ContainerOpts.WidgetOpts( 51&#x9;widget.WidgetOpts.LayoutData(widget.RowLayoutData{ 52&#x9;Stretch: true, 53&#x9;}), 54&#x9;widget.WidgetOpts.MinSize(50, 80), 55&#x9;), 56&#x9;) 57&#x9;d := widget.NewContainer( 58&#x9;widget.ContainerOpts.BackgroundImage( 59&#x9;image.NewNineSliceColor(colornames.Lightslategrey), 60&#x9;), 61&#x9;widget.ContainerOpts.WidgetOpts( 62&#x9;widget.WidgetOpts.LayoutData(widget.RowLayoutData{ 63&#x9;Stretch: true, 64&#x9;}), 65&#x9;widget.WidgetOpts.MinSize(50, 80), 66&#x9;), 67&#x9;) 68&#x9;root := widget.NewContainer( 69&#x9;widget.ContainerOpts.BackgroundImage( 70&#x9;image.NewNineSliceColor(colornames.Lightsteelblue), 71&#x9;), 72&#x9;widget.ContainerOpts.Layout(widget.NewRowLayout( 73&#x9;widget.RowLayoutOpts.Direction( 74&#x9;widget.DirectionVertical, 75&#x9;), 76&#x9;)), 77&#x9;) 78&#x9;root.AddChild(a) 79&#x9;root.AddChild(b) 80&#x9;root.AddChild(c) 81&#x9;root.AddChild(d) 82 83&#x9;return &amp;Game{ 84&#x9;ui: &amp;ebitenui.UI{Container: root}, 85&#x9;} 86} 87 88func (g *Game) Update() error { 89&#x9;g.ui.Update() 90&#x9;return nil 91} 92 93func (g *Game) Draw(screen *ebiten.Image) { 94&#x9;g.ui.Draw(screen) 95} 96 97func (g *Game) Layout(w, h int) (int, int) { 98&#x9;return w, h 99} Layout options Direction Responsible for whether child containers will follow each other in rows or columns.</description>
    </item>
  </channel>
</rss>